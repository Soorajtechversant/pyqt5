













from PyQt5 import QtCore, QtGui, QtWidgets
from pynput import keyboard
from PyQt5.QtWidgets import * 

class Ui_showing(object):
  
    def setupUi(self, showing):
        showing.setObjectName("showing")
        showing.resize(640, 480)
        self.centralwidget = QtWidgets.QWidget(showing)
        self.centralwidget.setObjectName("centralwidget")
        self.lineEditmm = QtWidgets.QLineEdit('sssss', self.centralwidget)
        self.lineEditmm.setGeometry(QtCore.QRect(90, 60, 451, 191))
        
        
        self.label = QLabel(self.centralwidget)
  
        # setting geometry to the label
        self.label.setGeometry(80, 150, 120, 60)
  
        # setting word wrap property of label
        self.label.setWordWrap(True)
        
        
        self.lineEditmm.setObjectName("lineEditmm")
        
        showing.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(showing)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 640, 22))
        
        

        
        
        
        self.menubar.setObjectName("menubar")
        showing.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(showing)
        self.statusbar.setObjectName("statusbar")
        showing.setStatusBar(self.statusbar)

        self.retranslateUi(showing)
        # self.lineEditmm.returnPressed.connect(self.listen())
        QtCore.QMetaObject.connectSlotsByName(showing)
        
          
    def retranslateUi(self, showing):
        self._translate = QtCore.QCoreApplication.translate
        showing.setWindowTitle(self._translate("showing", "showitems"))
      
    
    # def calling(self ):
    #     self.lineEditmm.setText(self._translate('showing' , self.listen()))
    
    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Return:
            self.on_click()

    
 
    def on_press(self ,key):
            try:
                self.label.setText('alphanumeric key {0} pressed'.format(
                    key.char))
                print(self.label.text)
            except AttributeError:
                self.label.setText('special key {0} pressed'.format(
                    key))
                text= self.on_press()
                a=open('demoaa.txt','w')
                a.write(text)
                a.close()       
                
                
    def on_release(self ,key):
            self.label.setText(('{0} released'.format(
                key)))
            if key == keyboard.Key.esc:
                # Stop listener
                return False
            
                text= self.on_press()
                a=open('demoaa.txt','w')
                a.write(text)
                a.close()       
    

    def listen(self):
            with keyboard.Listener(
                        on_press=self.on_press,
                        on_release=self.on_release) as listener:
                    listener.join()   
                 text= self.on_press()
                a=open('demoaa.txt','w')
                a.write(text)
                a.close()       


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    showing = QtWidgets.QMainWindow()
    ui = Ui_showing()
    ui.setupUi(showing)
    # listen(ui)
    showing.show()
    sys.exit(app.exec_())
